{"version":3,"sources":["components/logoAnimation.js","App.js","reportWebVitals.js","index.js"],"names":["randomDirection","d","Math","round","random","LogoAnimation","canvasAnimRef","useRef","canvasTextRef","animContainer","useEffect","s","swarm","frozenSwarm","i","push","x","y","dx","dy","repeat","animate","ctxAnim","ctxText","canvasAnim","width","height","canvasText","clearRect","rect","fillStyle","fill","font","textAlign","fillText","stickySize","forEach","m","beginPath","strokeStle","fillRect","stroke","animData","getImageData","textData","mInd","newIndex","data","splice","length","putImageData","requestAnimationFrame","current","getContext","ref","className","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.be822c01.chunk.js","sourcesContent":["import React, { useEffect, useRef } from 'react'\nimport './logoAnimation.css';\n\nconst randomDirection = (d) => {\n    if (d === 0) {\n        const t = Math.round(Math.random() * 10);\n        d = (t % 2 === 0) ? 1 : -1;\n    }\n    const r = d * (Math.round(Math.random() * 5) + 5)\n    return r;\n}\n\nexport default function LogoAnimation() {\n    const canvasAnimRef = useRef(null);\n    const canvasTextRef = useRef(null);\n    const animContainer = useRef(null);\n\n    useEffect(() => {\n        const s = { w: 1920, h: 1024 };\n\n        let swarm = [];\n        let frozenSwarm = [];\n\n        for (let i = 0; i < 2000; i++) {\n            swarm.push({ x: Math.round(Math.random() * s.w), y: Math.round(Math.random() * s.h), dx: randomDirection(0), dy: randomDirection(0), repeat: 0 })\n        }\n\n        const animate = (ctxAnim, ctxText) => {\n\n            canvasAnim.width = s.w;\n            canvasAnim.height = s.h;\n            canvasText.width = s.w;\n            canvasText.height = s.h;\n\n            ctxAnim.clearRect(0, 0, s.w, s.h);\n            ctxAnim.rect(0, 0, s.w, s.h);\n            ctxAnim.fillStyle = '#000000';\n            ctxAnim.fill();\n\n            ctxText.font = `bold 400px Arial`;\n            ctxText.fillStyle = \"rgb(10,0,0)\";\n            ctxText.textAlign = \"center\";\n            ctxText.fillText(\"GREG\", s.w / 2, s.h / 2 + 150);\n\n            const stickySize = { lg: { x: 20, y: 25 }, sm: { x: 15, y: 15 } };\n\n            frozenSwarm.forEach((m) => {\n                ctxAnim.beginPath();\n                ctxAnim.fillStyle = \"yellow\";\n                ctxAnim.strokeStle = \"black\";\n                ctxAnim.fillRect(m.x - stickySize.lg.x / 2, m.y - stickySize.lg.y / 2, stickySize.lg.x, stickySize.lg.y);\n                ctxAnim.rect(m.x - stickySize.lg.x / 2, m.y - stickySize.lg.y / 2, stickySize.lg.x, stickySize.lg.y);\n                ctxAnim.stroke();\n                ctxText.fillStyle = \"rgb(0,100,0)\";\n                ctxText.fillRect(m.x - stickySize.sm.x / 2, m.y - stickySize.sm.y / 2, stickySize.sm.x, stickySize.sm.y);\n            });\n\n            // draw dots\n            const animData = ctxAnim.getImageData(0, 0, s.w, s.h);\n            const textData = ctxText.getImageData(0, 0, s.w, s.h);\n\n            // draw followers\n            swarm.forEach((m, mInd) => {\n                m.x += m.dx;\n                m.y += m.dy;\n\n                if (m.x > s.w && m.dx > 0) {\n                    m.dx = randomDirection(-1)\n                    m.repeat++;\n                }\n\n                if (m.x < 0 && m.dx < 0) {\n                    m.dx = randomDirection(1)\n                    m.repeat++;\n                }\n\n                if (m.y > s.h && m.dy > 0) {\n                    m.dy = randomDirection(-1)\n                    m.repeat++;\n                }\n                if (m.y < 0 && m.dy < 0) {\n                    m.dy = randomDirection(1)\n                    m.repeat++;\n                }\n\n                const newIndex = (m.x + m.y * s.w) * 4;\n\n                animData.data[newIndex + 0] = 255;\n                animData.data[newIndex + 1] = 255;\n                animData.data[newIndex + 2] = 255;\n                animData.data[newIndex + 3] = 255;\n\n                if (textData.data[newIndex + 0] === 10 && m.repeat > 1) {\n                    swarm.splice(mInd, 1);\n                    frozenSwarm.push({ x: m.x, y: m.y });\n                }\n            })\n\n            if (swarm.length > 500) {\n                ctxAnim.putImageData(animData, 0, 0);\n            }\n\n            if (swarm.length > 500) {\n                requestAnimationFrame(() => animate(ctxAnim, ctxText));\n            }\n        };\n\n        const canvasAnim = canvasAnimRef.current;\n        const canvasText = canvasTextRef.current;\n        const ctxAnim = canvasAnim.getContext('2d');\n        const ctxText = canvasText.getContext('2d');\n\n        requestAnimationFrame(() => animate(ctxAnim, ctxText));\n\n    }, [animContainer])\n\n    useEffect(() => {\n\n    }, [])\n\n    return (\n        <div ref={animContainer} className={'Animation__Container'}>\n            <canvas ref={canvasTextRef} className={'Animation__Canvas'}></canvas>\n            <canvas ref={canvasAnimRef} className={'Animation__Canvas'}></canvas>\n        </div>\n    )\n}\n","import LogoAnimation from './components/logoAnimation';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <LogoAnimation />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}